/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Feedback,
} from '../models/index';
import {
    FeedbackFromJSON,
    FeedbackToJSON,
} from '../models/index';

export interface FeedbackCreateRequest {
    feedback?: Feedback;
}

/**
 * FeedbackApi - interface
 * 
 * @export
 * @interface FeedbackApiInterface
 */
export interface FeedbackApiInterface {
    /**
     * 
     * @param {Feedback} [feedback] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackApiInterface
     */
    feedbackCreateRaw(requestParameters: FeedbackCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Feedback>>;

    /**
     */
    feedbackCreate(requestParameters: FeedbackCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Feedback>;

}

/**
 * 
 */
export class FeedbackApi extends runtime.BaseAPI implements FeedbackApiInterface {

    /**
     */
    async feedbackCreateRaw(requestParameters: FeedbackCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Feedback>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/feedback/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FeedbackToJSON(requestParameters['feedback']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeedbackFromJSON(jsonValue));
    }

    /**
     */
    async feedbackCreate(requestParameters: FeedbackCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Feedback> {
        const response = await this.feedbackCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
