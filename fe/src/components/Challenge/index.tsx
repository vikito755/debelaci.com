import React, { useState, useEffect } from 'react'
import {
  Container,
  Grid,
  Image,
  Title,
  Text,
  Checkbox,
  Stack,
} from '@mantine/core'

// Challenges and success messages
const challenges: string[] = [
  '–ù–∞–ø—Ä–∞–≤–∏ 10 –ª–∏—Ü–µ–≤–∏ –æ–ø–æ—Ä–∏ (–¥–æ—Ä–∏ –¥–∞ —Ç–∏ –æ—Ç–Ω–µ–º–µ).',
  '–ò–∑–ø–∏–π 8 —á–∞—à–∏ –≤–æ–¥–∞.',
  '–ò–∑–ª–µ–∑ –Ω–∞ —Ä–∞–∑—Ö–æ–¥–∫–∞ –∑–∞ 15 –º–∏–Ω.',
  '–ë—è–≥–∞–π 100 –º–µ—Ç—Ä–∞',
  '–ù–µ —è–∂ 2 —á–∞—Å–∞ –ø—Ä–µ–¥–∏ –ª—è–≥–∞–Ω–µ.',
  '–ù–µ –ø–∏–π –∫–∞—Ñ–µ/–∫–æ—Ñ–µ–π–Ω —Å–ª–µ–¥ 17:00.',
]

const successMessages: string[] = [
  `- –ü–µ—Ç—Ä–µ, –∫–∞—Ä–∞–π –ø–æ-–≤–Ω–∏–º–∞—Ç–µ–ª–Ω–æ.
    - –ï, –∫–≤–æ –∏—Å–∫–∞—à, –º–∞!? –ö–∞—Ä–∞–º —Å–∏ –∫–∞–∫—Ç–æ —Ç—Ä—è–±–≤–∞.
    - –ò–∑–æ–±—â–æ –Ω–µ –ø—Å—É–≤–∞—à...`,
  `- –ê–∫–æ —Ç–∏ —Å–µ —Å–∫—ä—Å–∞—Ç –≥–æ—Ä–Ω–∏—Ç–µ –∫–æ–ø—á–µ—Ç–∞ –Ω–∞ —Ä–∏–∑–∞—Ç–∞ - –Ω–∞ –ª—é–±–æ–≤ –µ.
    - –ê–∫–æ —Ç–∏ —Å–µ —Å–∫—ä—Å–∞—Ç –¥–æ–ª–Ω–∏—Ç–µ –∫–æ–ø—á–µ—Ç–∞ - –Ω–∞ –¥–∏–µ—Ç–∞ –µ.`,
  `–ü—ä—Ä–≤–∞ —Å—Ä–µ—â–∞. –¢—è:
    - –û—Ö, –∏–∑–≤–∏–Ω—è–≤–∞–º —Å–µ, —á–µ –ø–æ–∑–∞–∫—ä—Å–Ω—è—Ö!
    –¢–æ–π:
    - –û, –Ω–∏—â–æ –ø–æ–¥–æ–±–Ω–æ! –ê–∑ –ø—Ä–æ—Å—Ç–æ –¥–æ–π–¥–æ—Ö —á–∞—Å –∏ –ø–æ–ª–æ–≤–∏–Ω–∞ –ø–æ-—Ä–∞–Ω–æ!`,
  `–ö—Ä—ä—á–º–∞ - –º—è—Å—Ç–æ, –Ω–∞ –∫–æ–µ—Ç–æ –±–æ–∑–∞–π–Ω–∏–∫—ä—Ç —Å–µ –ø—Ä–µ–≤—Ä—ä—â–∞ –≤—ä–≤ –≤–ª–µ—á—É–≥–æ.`,
  `–í—Å—è–∫–∞ —Å—É—Ç—Ä–∏–Ω —á–∏—Å—Ç–∞—á–∫–∞—Ç–∞ –≤ –ú—É–∑–µ—è –∑–∞ —Å—ä–≤—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–∫—É—Å—Ç–≤–æ, –ø–∏—Ç–∞—à–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞:
    - –®–µ—Ñ–µ, —Ç–æ–≤–∞ –∏–∑–∫—É—Å—Ç–≤–æ –ª–∏ –µ –∏–ª–∏ –¥–∞ –≥–æ —Ö–≤—ä—Ä–ª—è–º?`,
]

interface ChallengeData {
  challenge: string
  checked: boolean
  streak: number
  date: string // YYYY-MM-DD
}

const LOCAL_STORAGE_KEY = 'dailyChallenge'

const ChallengeHero: React.FC = () => {
  const [challenge, setChallenge] = useState<string>('')
  const [checked, setChecked] = useState<boolean>(false)
  const [streak, setStreak] = useState<number>(0)
  const [date, setDate] = useState<string>('')
  const [successMessage, setSuccessMessage] = useState<string>('')

  const getToday = (): string => new Date().toISOString().split('T')[0]

  // Load challenge data
  useEffect(() => {
    const today = getToday()
    const savedData = localStorage.getItem(LOCAL_STORAGE_KEY)
    let data: ChallengeData | null = null

    if (savedData) {
      try {
        data = JSON.parse(savedData) as ChallengeData
      } catch (e) {
        console.error('Failed to parse localStorage data', e)
      }
    }

    if (data) {
      if (data.date === today) {
        setChallenge(data.challenge)
        setChecked(data.checked)
        setStreak(data.streak)
        setDate(data.date)
      } else {
        const newChallenge =
          challenges[Math.floor(Math.random() * challenges.length)]
        const updatedStreak = data.checked ? data.streak + 1 : 0

        const newData: ChallengeData = {
          challenge: newChallenge,
          checked: false,
          streak: updatedStreak,
          date: today,
        }

        setChallenge(newChallenge)
        setChecked(false)
        setStreak(updatedStreak)
        setDate(today)

        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(newData))
      }
    } else {
      const newChallenge =
        challenges[Math.floor(Math.random() * challenges.length)]
      const newData: ChallengeData = {
        challenge: newChallenge,
        checked: false,
        streak: 0,
        date: today,
      }

      setChallenge(newChallenge)
      setChecked(false)
      setStreak(0)
      setDate(today)

      localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(newData))
    }
  }, [])

  const handleCheck = (value: boolean) => {
    setChecked(value)

    if (value) {
      const message =
        successMessages[Math.floor(Math.random() * successMessages.length)]
      setSuccessMessage(message)

      const savedData: ChallengeData = {
        challenge,
        checked: true,
        streak,
        date,
      }

      localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(savedData))
    } else {
      setSuccessMessage('')
    }
  }

  return (
    <Container size="lg" py="xl">
      <Grid align="center" gutter="xl">
        {/* Right: Hero Image */}
        <Grid.Col span={{ base: 12, md: 6 }} order={{ base: 2, md: 1 }}>
          <Image
            src="/images/heavy-guy.png"
            alt="Challenge Hero"
            radius="md"
          />
        </Grid.Col>

        {/* Left: Text and Challenge */}
        <Grid.Col span={{ base: 12, md: 6 }} order={{ base: 1, md: 2 }}>
          <Stack gap="md">
            <Title order={1}>–î–Ω–µ–≤–Ω–æ –ø—Ä–µ–¥–∏–∑–≤–∏–∫–∞—Ç–µ–ª—Å—Ç–≤–æ üöÄ</Title>
            <Text size="md">
              –ò–∑–ø—ä–ª–Ω–∏ –ø—Ä–µ–¥–∏–∑–≤–∏–∫–∞—Ç–µ–ª—Å—Ç–≤–æ—Ç–æ –∏ —â–µ –ø–æ–ª—É—á–∏—à –ø—Ä–æ–∏–∑–≤–æ–ª–µ–Ω –≤–∏—Ü.
              –í—ä—Ä–Ω–∏ —Å–µ —É—Ç—Ä–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏.
            </Text>

            <Text fw={700} size="lg">
              –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–Ω–∏ –¥–Ω–∏: {streak} üî•
            </Text>

            <Checkbox
              label={challenge}
              checked={checked}
              style={{cursor: 'pointer'}}
              onChange={(e) => handleCheck(e.currentTarget.checked)}
              size="lg"
            />

            {checked && (
              <Text fw={700} style={{ animation: 'fadeIn 0.5s ease-in-out' }}>
                –¢–≤–æ—è—Ç –≤–∏—Ü:<br />
                {successMessage}
              </Text>
            )}
          </Stack>
        </Grid.Col>
      </Grid>
    </Container>
  )
}

export default ChallengeHero
